<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="RequiredField" xml:space="preserve">
    <value>This field is required.</value>
  </data>
  <data name="Welcome" xml:space="preserve">
    <value>Welcome.</value>
  </data>
  <data name="InvalidPhoneNumber" xml:space="preserve">
    <value>Invalid phone number, must be (9) digit without (0).</value>
  </data>
  <data name="InvalidEmail" xml:space="preserve">
    <value>Invalid email address.</value>
  </data>
  <data name="LoginResponseInvalidEmailPasswordErrMsg" xml:space="preserve">
    <value>Invalid email / password.</value>
  </data>
  <data name="LoginResponseSuccessMsg" xml:space="preserve">
    <value>User logged in successfully.</value>
  </data>
  <data name="LoginResponsePhoneConfirmationErrMsg" xml:space="preserve">
    <value>Please activate your account.</value>
  </data>
  <data name="IdentityDefaultError" xml:space="preserve">
    <value>An unknown failure has occured.</value>
  </data>
  <data name="UserWithEmailExists" xml:space="preserve">
    <value>A user with such email exists.</value>
  </data>
  <data name="ConfirmPasswordNotMatch" xml:space="preserve">
    <value>Password doesn't match</value>
  </data>
  <data name="IdentityErrorConcurrencyFailure" xml:space="preserve">
    <value>Concurrency failure.</value>
  </data>
  <data name="IdentityErrorDefault" xml:space="preserve">
    <value>Identity system error.</value>
  </data>
  <data name="IdentityErrorDuplicateEmail" xml:space="preserve">
    <value>Email '{0}' already exists.</value>
  </data>
  <data name="IdentityErrorDuplicateRoleName" xml:space="preserve">
    <value>Role name '{0}' already exists.</value>
  </data>
  <data name="IdentityErrorDuplicateUserName" xml:space="preserve">
    <value>Username '{0}' already exists.</value>
  </data>
  <data name="IdentityErrorInvalidEmail" xml:space="preserve">
    <value>Email '{0}' is invalid.</value>
  </data>
  <data name="IdentityErrorInvalidToken" xml:space="preserve">
    <value>Invalid Code.</value>
  </data>
  <data name="IdentityErrorInvalidUserName" xml:space="preserve">
    <value>Username '{0}' is invalid.</value>
  </data>
  <data name="IdentityErrorPasswordMismatch" xml:space="preserve">
    <value>The provided password doesn't match your saved password.</value>
  </data>
  <data name="IdentityErrorPasswordRequiresDigit" xml:space="preserve">
    <value>The password must contain digits (0 - 9).</value>
  </data>
  <data name="IdentityErrorPasswordRequiresLower" xml:space="preserve">
    <value>The password must contain lower case letters (a - z).</value>
  </data>
  <data name="IdentityErrorPasswordRequiresNonAlphanumeric" xml:space="preserve">
    <value>The password must contain non-alphanumeric character</value>
  </data>
  <data name="IdentityErrorPasswordRequiresUniqueChars" xml:space="preserve">
    <value>The password must contain '{0}' unique character</value>
  </data>
  <data name="IdentityErrorPasswordRequiresUpper" xml:space="preserve">
    <value>The password must contain upper case letters (A - Z).</value>
  </data>
  <data name="IdentityErrorPasswordTooShort" xml:space="preserve">
    <value>The password must be al least '{0}' character long.</value>
  </data>
  <data name="IdentityErrorRecoveryCodeRedemptionFailed" xml:space="preserve">
    <value>Recovery code was not redeemed.</value>
  </data>
  <data name="IdentityErrorUserAlreadyHasPassword" xml:space="preserve">
    <value>User already has a password</value>
  </data>
  <data name="IdentityErrorUserAlreadyInRole" xml:space="preserve">
    <value>The user is already in '{0}' role.</value>
  </data>
  <data name="IdentityErrorUserLockoutNotEnabled" xml:space="preserve">
    <value>User lockout is not enabled.</value>
  </data>
  <data name="IncorrectPassword" xml:space="preserve">
    <value>Incorrect password</value>
  </data>
  <data name="VerificationCodeSuccessfully" xml:space="preserve">
    <value>Verification code has been sent successfully</value>
  </data>
  <data name="RegisterUserResponseErrMsg" xml:space="preserve">
    <value>Unable to create account. Please check the following:</value>
  </data>
  <data name="PasswordResetTokenSentSuccessfully" xml:space="preserve">
    <value>Password reset token sent successfully.</value>
  </data>
  <data name="LoginResponseDisabledAccountErrMsg" xml:space="preserve">
    <value>Your account has been disabled, please contact the technical support team for more information</value>
  </data>
  <data name="LoginResponseUnauthorizedUserErrMsg" xml:space="preserve">
    <value>You do not have an account, please register an account</value>
  </data>
  <data name="PasswordResetResponseErrMsg" xml:space="preserve">
    <value>Unable to rest the password, Please check the following:</value>
  </data>
  <data name="PasswordRestResponseSuccessMsg" xml:space="preserve">
    <value>Your password has been updated successfully.</value>
  </data>
  <data name="PasswordRestTokenInvalid" xml:space="preserve">
    <value>Invalid password rest token.</value>
  </data>
  <data name="GeneralRequestValidationError" xml:space="preserve">
    <value>Please check the following:</value>
  </data>
  <data name="RegisterAccountSentVerificationSuccessMsg" xml:space="preserve">
    <value>Your account has been created successfully, please activate it</value>
  </data>
  <data name="RegisterAccountVerifyTokenErrMsg" xml:space="preserve">
    <value>Unable to verify your account, please check the following:</value>
  </data>
  <data name="InvalidIBAN" xml:space="preserve">
    <value>Invalid IBAN</value>
  </data>
  <data name="LoginResponsePhoneConfirmationMsgSentErrMsg" xml:space="preserve">
    <value>Unable to send confirmation code, please try again.</value>
  </data>
  <data name="YakkenClientVehicleResponseValidationErrMsg" xml:space="preserve">
    <value>Please check the vehicle sequance number and the vehicle owner identification number</value>
  </data>
  <data name="YakkenInsuredResponseGlobalErrMsg" xml:space="preserve">
    <value>An error occurred during the process of querying insured data from the National Information Center</value>
  </data>
  <data name="YakkenInsuredResponseValidationErrMsg" xml:space="preserve">
    <value>Please check the ID number and date of birth of the insured</value>
  </data>
  <data name="YakkenSaudiPostResponseValidationErrMsg" xml:space="preserve">
    <value>Please check the ID number and you are registered at the National Address Service</value>
  </data>
  <data name="YakkenDriverResponseGlobalErrMsg" xml:space="preserve">
    <value>An error occurred during the process of querying additional driver data from the National Information Center</value>
  </data>
  <data name="YakkenDriverResponseValidationErrMsg" xml:space="preserve">
    <value>Please check the ID number and  date of birth of the additional driver</value>
  </data>
  <data name="Permission.Create.Account" xml:space="preserve">
    <value>Create Account</value>
  </data>
  <data name="Permission.Manage.Identity" xml:space="preserve">
    <value>Manage Identity</value>
  </data>
  <data name="Permission.Manage.Policies" xml:space="preserve">
    <value>Manage Policies</value>
  </data>
  <data name="Permission.Update.Account" xml:space="preserve">
    <value>Update Account</value>
  </data>
  <data name="Permission.Update.Clients.Details" xml:space="preserve">
    <value>Update Clients Details</value>
  </data>
  <data name="Permission.View.API.Logger" xml:space="preserve">
    <value>View API Logger</value>
  </data>
  <data name="Permission.View.Clients.Accounts" xml:space="preserve">
    <value>View Clients Accounts</value>
  </data>
  <data name="Permission.View.Clients.Details" xml:space="preserve">
    <value>View Clients Details</value>
  </data>
  <data name="Permission.View.Employees.Accounts" xml:space="preserve">
    <value>View Employees Accounts</value>
  </data>
  <data name="Permission.View.Policies" xml:space="preserve">
    <value>View Policies</value>
  </data>
  <data name="Permission.View.Quotations" xml:space="preserve">
    <value>View Quotations</value>
  </data>
</root>