using FluentValidation;
using Microsoft.Extensions.Localization;
using System;
using System.Collections.Generic;

namespace  AggriPortal.API.Contracts.Request
{
    public class InsureQuotationRequest
    {
        /// <summary>
        /// Request code generated by our side.
        /// </summary>
        /// 
        public string QuotationRequestId { get; set; }
        public int InsuranceCompanyId { get; set; }

        /// 
        /// <summary>
        /// Product type Id 
        /// <para>
        /// Value from name="ProductType" lookup table.
        /// <br>1 = Third-Party Vehicle Insurance</br>
        /// <br>2 = Comprehensive Vehicle Insurance</br>
        /// </para>
        /// </summary>
        /// 
        //public int ProductTypeId { get; set; }

        /// <summary>
        /// Policy effective date.
        /// <para>Format: dd-MM-yyyy</para>
        /// </summary>
        /// 
        public DateTime PolicyEffectiveDate { get; set; }
      /// ...
      /// <summary>
      /// 
      /// </summary>
        public string PromoCode { get; set; }

        /// <summary>
        /// Type of card ID
        /// <para>
        ///  <br>1 = Citizen.</br>
        ///  <br>2 = Resident.</br>
        /// </para>
        /// </summary>
        /// 
        public int InsuredIdentityTypeId { get; set; }

        public long InsuredIdentityNumber { get; set; }

        /// <summary>
        /// Insured birth date.
        /// <para>
        /// It could be:
        /// <br>Hijri date format: dd-MM-yyyy.</br>
        /// <br>Greogorian date format: dd-MM-yyyy</br>
        /// <br>based on parameter name = "InsuredIdentityTypeId".</br>
        /// </para>
        /// </summary>
        public string InsuredBirthDate { get; set; }

        /// <summary>
        /// Insured gender id
        /// <para>
        /// Value from name = "Gender" lookup table.
        /// <br>M = Male</br>
        /// <br>F = Female</br>
        /// </para>
        /// </summary>
        public string InsuredGenderId { get; set; }

        /// <summary>
        /// Insured nationality Id.
        /// <para>Value from name = "Nationalities" lookup table.</para>
        /// </summary>
        
        public int InsuredNationalityId { get; set; }

        /// <summary>
        /// Insured identity issue place Id.
        /// <para>Value from name = "Cities" lookup table</para>
        /// </summary>
        /// 
        public int? InsuredIdentityIssuePlaceId { get; set; }

        /// <summary>
        /// Insured first name in english.
        /// </summary>
        public string InsuredFirstName { get; set; }

        /// <summary>
        /// Insured middle name in english.
        /// </summary>
        public string InsuredMiddleName { get; set; }

        /// <summary>
        /// Insured last name in english.
        /// </summary>
        public string InsuredLastName { get; set; }

        /// <summary>
        /// Insured first name in arabic.
        /// </summary>
        public string InsuredFirstNameAr { get; set; }

        /// <summary>
        /// Insured middle name in arabic.
        /// </summary>
        public string InsuredMiddleNameAr { get; set; }

        /// <summary>
        /// Insured last name in arabic.
        /// </summary>
        public string InsuredLastNameAr { get; set; }

        /// <summary>
        /// Insured social status Id.
        /// <para>Value from name = "SocialStatus" lookup table</para>
        /// </summary>
        public int InsuredSocialStatusId { get; set; }

        /// <summary>
        /// Insured ocupation Id.
        /// <para>Value from name = "" lookup table.</para>
        /// </summary>
        public int? InsuredOccupationId { get; set; }

        /// <summary>
        /// Insured occupation.
        /// </summary>
        public string InsuredOccupation { get; set; }

        /// <summary>
        /// Insured education level Id.
        /// <para>Value from name = "EducationLevel" lookup table.</para>
        /// </summary>
        public int InsuredEducationLevelId { get; set; }

        /// <summary>
        /// Number of children under 16 years.
        /// </summary>
        public int? ChildrenUnder16Years { get; set; }

        /// <summary>
        /// Insured work city Id.
        /// <para>Value from name = "Cities" lookup table</para>
        /// </summary>
        public int? InsuredWorkCityId { get; set; }

        /// <summary>
        /// Insured city Id.
        /// <para>Value from name = "Cities" lookup table.</para>
        /// </summary>
        public int? DrivingCityId { get; set; }

        public int InsuredBuildingNumber { get; set; }
        public string InsuredStreet { get; set; }
        public string InsuredDistrict { get; set; }
        public string InsuredCity { get; set; }
        public int InsuredPostalCode { get; set; }
        public int InsuredAdditionalNumber { get; set; }

        /// <summary>
        /// Vehicle identification type. 
        /// <para>Options:
        /// <br>1 = Sequence Number.</br>
        /// <br>2 = Custom Card.</br>
        /// </para>
        /// </summary>
        public int VehicleIdTypeId { get; set; }

        /// <summary>
        /// Vehicle identification number (Sequence No / Custom Card).
        /// </summary>
        public long VehicleId { get; set; }

        /// <summary>
        /// Vehicle plate number.
        /// <para>Value from Yakeen.
        /// <br>Required if param name = "VehicleIdTypeId" equel "1" </br>
        /// </para>
        /// </summary>
        public int? VehiclePlateNumber { get; set; }

        /// <summary>
        /// Vehicle plate text 1 Value from Yakeen in arabic.
        /// <para>Required if param = "VehicleIdTypeId" equel "1".
        /// </para>
        /// </summary>
        public int? VehiclePlateFirstLetterId { get; set; }

        /// <summary>
        /// Vehicle plate text 2 Value from Yakeen in arabic.
        /// <para>Required if param = "VehicleIdTypeId" equel "1".
        /// </para>
        /// </summary>
        public int? VehiclePlateSecondLetterId { get; set; }

        /// <summary>
        /// Vehicle plate text 3 Value from Yakeen in arabic.
        /// <para>Required if param = "VehicleIdTypeId" equel "1".
        /// </para>
        /// </summary>
        public int? VehiclePlateThirdLetterId { get; set; }

        /// <summary>
        /// Vehicle chassis number.
        /// <para>Value from Yakeen.</para>
        /// </summary>
        public string VehicleChassisNumber { get; set; }

        /// <summary>
        /// Vehicle Owner.
        /// <para>Required if param name = "VehicleIdTypeId" equal "1" </para>
        /// </summary>
        public string VehicleOwnerName { get; set; }

        /// <summary>
        /// Vehicle owner identity number. (National ID / Iqama ID).
        /// </summary>
        public long? VehicleOwnerIdentityNumber { get; set; }

        /// <summary>
        /// Vehicle plate type Id
        /// <para>Value from Yakken, is required if param name = "VehicleIdTypeId" equel "1"</para>
        /// </summary>
        public int? VehiclePlateTypeId { get; set; }

        /// <summary>
        /// Vehicle modal year.
        /// <para>Value from Yakeen</para>
        /// </summary>
        public int VehicleModelYear { get; set; }

        /// <summary>
        /// Vehicle maker.
        /// <para>Value from Yakeen in arabic</para>
        /// </summary>
        public int? VehicleMakerId { get; set; }

        /// <summary>
        /// Vehicle modal Id.
        /// <para>Value from Yakeen</para>
        /// </summary>
        public int VehicleModelId { get; set; }

        /// <summary>
        /// Vehicle major color Id.
        /// <para>Value from name = "VehicleColor" lookup table.</para>
        /// </summary>
        public int? VehicleMajorColorId { get; set; }

        public int? VehicleBodyTypeId { get; set; }
        
        /// <summary>
        /// Vehicle registration (Istemara) issue city code 
        /// City supported ELM Code.
        /// </summary>
        public int? VehicleRegistrationCityId { get; set; }
        public string VehicleRegistrationExpiryDate { get; set; }
        public int? VehicleCylinders { get; set; }
        public int? VehicleWeight { get; set; }
        public int? VehicleCapacity { get; set; }
        public bool IsVehicleOwnerTransfer { get; set; }
        public decimal VehicleSumInsured { get; set; }
        public int? VehicleRepairMethodId { get; set; }
        public int? VehicleEngineSizeId { get; set; }
        public int VehicleUseId { get; set; }
        public int? VehicleCurrentMileage { get; set; }
        public int? VehicleTransmissionTypeId { get; set; }
        public int? VehicleMileageExpectedAnnualId { get; set; }
        public int? VehicleAxleWeightId { get; set; }
        public int? VehicleParkingLocationId { get; set; }
        public bool IsVehicleModified { get; set; }
        public string VehicleModificationDetails { get; set; }
        public int NCDFreeYears { get; set; }
        public string NCDReference { get; set; }
        public List<VehicleSpecification> VehicleSpecifications { get; set; }
        public List<Driver> Drivers { get; set; }
        public InsureQuotationRequest()
        {
            VehicleSpecifications = new List<VehicleSpecification>();
            Drivers = new List<Driver>();
        }
    }

    public class VehicleSpecification
    {
        public int VehicleSpecificationId { get; set; }
    }

    #region Request Validator
    public class MotorRequestQuoteValidator : AbstractValidator<InsureQuotationRequest>
    {
        public MotorRequestQuoteValidator(IStringLocalizer<MotorRequestQuoteValidator> localizer)
        {
            RuleFor(p => p.InsuredIdentityTypeId).NotEmpty().NotNull().WithMessage(p=> localizer["RequiredField"]);
            RuleFor(p => p.PolicyEffectiveDate)
                .NotEmpty().WithMessage(p=> localizer["RequiredField"])
                .NotNull().WithMessage(p=> localizer["RequiredField"]);

            RuleFor(p => p.InsuredIdentityNumber)
                .NotEmpty().WithMessage(p => localizer["RequiredField"])
                .NotNull().WithMessage(p => localizer["RequiredField"]);
                

            RuleFor(p => p.InsuredGenderId)
                .NotEmpty().WithMessage(p=> localizer["RequiredField"])
                .NotNull().WithMessage("Gender is required")
                .Length(1, 1).WithMessage("Invalid entry data, allowed options (F,M)");


            RuleFor(p => p.VehicleIdTypeId)
                .NotEmpty().WithMessage(p => localizer["RequiredField"])
                .NotNull().WithMessage(p => localizer["RequiredField"]);

            RuleFor(p => p.VehicleId)
                .NotEmpty().WithMessage(p => localizer["RequiredField"])
                .NotNull().WithMessage(p => localizer["RequiredField"]);

            RuleFor(p => p.VehicleModificationDetails)
                .NotEmpty().When(req => req.IsVehicleModified);

        }
    }
    #endregion
}
